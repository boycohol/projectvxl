
projectFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee8  08003ee8  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee8  08003ee8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000003c  08003f2c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003f2c  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbe5  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff0  00000000  00000000  0002bc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000173fe  00000000  00000000  0002e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d753  00000000  00000000  00045d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00089b1a  00000000  00000000  00053491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000dcfab  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c10  00000000  00000000  000dd000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000352c  00000000  00000000  000ddc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e80 	.word	0x08003e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003e80 	.word	0x08003e80

0800014c <display7SEG2>:
		HAL_GPIO_WritePin(SEG1_5_GPIO_Port, SEG1_5_Pin, 1);
		HAL_GPIO_WritePin(SEG1_6_GPIO_Port, SEG1_6_Pin, 1);
		break;
	}
}
void display7SEG2(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81b6 	bhi.w	80004c8 <display7SEG2+0x37c>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG2+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001df 	.word	0x080001df
 800016c:	08000231 	.word	0x08000231
 8000170:	08000283 	.word	0x08000283
 8000174:	080002d5 	.word	0x080002d5
 8000178:	08000327 	.word	0x08000327
 800017c:	08000379 	.word	0x08000379
 8000180:	080003cb 	.word	0x080003cb
 8000184:	0800041d 	.word	0x0800041d
 8000188:	0800046f 	.word	0x0800046f
	case 0:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <display7SEG2+0x374>)
 8000192:	f001 fd6c 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019c:	48c8      	ldr	r0, [pc, #800]	; (80004c0 <display7SEG2+0x374>)
 800019e:	f001 fd66 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001a8:	48c5      	ldr	r0, [pc, #788]	; (80004c0 <display7SEG2+0x374>)
 80001aa:	f001 fd60 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b4:	48c2      	ldr	r0, [pc, #776]	; (80004c0 <display7SEG2+0x374>)
 80001b6:	f001 fd5a 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48bf      	ldr	r0, [pc, #764]	; (80004c0 <display7SEG2+0x374>)
 80001c2:	f001 fd54 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001cc:	48bc      	ldr	r0, [pc, #752]	; (80004c0 <display7SEG2+0x374>)
 80001ce:	f001 fd4e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2101      	movs	r1, #1
 80001d6:	48bb      	ldr	r0, [pc, #748]	; (80004c4 <display7SEG2+0x378>)
 80001d8:	f001 fd49 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 80001dc:	e19d      	b.n	800051a <display7SEG2+0x3ce>
	case 1:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	2180      	movs	r1, #128	; 0x80
 80001e2:	48b7      	ldr	r0, [pc, #732]	; (80004c0 <display7SEG2+0x374>)
 80001e4:	f001 fd43 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	48b4      	ldr	r0, [pc, #720]	; (80004c0 <display7SEG2+0x374>)
 80001f0:	f001 fd3d 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fa:	48b1      	ldr	r0, [pc, #708]	; (80004c0 <display7SEG2+0x374>)
 80001fc:	f001 fd37 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <display7SEG2+0x374>)
 8000208:	f001 fd31 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000212:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <display7SEG2+0x374>)
 8000214:	f001 fd2b 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021e:	48a8      	ldr	r0, [pc, #672]	; (80004c0 <display7SEG2+0x374>)
 8000220:	f001 fd25 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2101      	movs	r1, #1
 8000228:	48a6      	ldr	r0, [pc, #664]	; (80004c4 <display7SEG2+0x378>)
 800022a:	f001 fd20 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 800022e:	e174      	b.n	800051a <display7SEG2+0x3ce>
	case 2:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	48a2      	ldr	r0, [pc, #648]	; (80004c0 <display7SEG2+0x374>)
 8000236:	f001 fd1a 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000240:	489f      	ldr	r0, [pc, #636]	; (80004c0 <display7SEG2+0x374>)
 8000242:	f001 fd14 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024c:	489c      	ldr	r0, [pc, #624]	; (80004c0 <display7SEG2+0x374>)
 800024e:	f001 fd0e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000258:	4899      	ldr	r0, [pc, #612]	; (80004c0 <display7SEG2+0x374>)
 800025a:	f001 fd08 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000264:	4896      	ldr	r0, [pc, #600]	; (80004c0 <display7SEG2+0x374>)
 8000266:	f001 fd02 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000270:	4893      	ldr	r0, [pc, #588]	; (80004c0 <display7SEG2+0x374>)
 8000272:	f001 fcfc 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2101      	movs	r1, #1
 800027a:	4892      	ldr	r0, [pc, #584]	; (80004c4 <display7SEG2+0x378>)
 800027c:	f001 fcf7 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 8000280:	e14b      	b.n	800051a <display7SEG2+0x3ce>
	case 3:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	488e      	ldr	r0, [pc, #568]	; (80004c0 <display7SEG2+0x374>)
 8000288:	f001 fcf1 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000292:	488b      	ldr	r0, [pc, #556]	; (80004c0 <display7SEG2+0x374>)
 8000294:	f001 fceb 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	4888      	ldr	r0, [pc, #544]	; (80004c0 <display7SEG2+0x374>)
 80002a0:	f001 fce5 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 80002a4:	2200      	movs	r2, #0
 80002a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002aa:	4885      	ldr	r0, [pc, #532]	; (80004c0 <display7SEG2+0x374>)
 80002ac:	f001 fcdf 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002b6:	4882      	ldr	r0, [pc, #520]	; (80004c0 <display7SEG2+0x374>)
 80002b8:	f001 fcd9 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c2:	487f      	ldr	r0, [pc, #508]	; (80004c0 <display7SEG2+0x374>)
 80002c4:	f001 fcd3 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2101      	movs	r1, #1
 80002cc:	487d      	ldr	r0, [pc, #500]	; (80004c4 <display7SEG2+0x378>)
 80002ce:	f001 fcce 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 80002d2:	e122      	b.n	800051a <display7SEG2+0x3ce>
	case 4:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2180      	movs	r1, #128	; 0x80
 80002d8:	4879      	ldr	r0, [pc, #484]	; (80004c0 <display7SEG2+0x374>)
 80002da:	f001 fcc8 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e4:	4876      	ldr	r0, [pc, #472]	; (80004c0 <display7SEG2+0x374>)
 80002e6:	f001 fcc2 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f0:	4873      	ldr	r0, [pc, #460]	; (80004c0 <display7SEG2+0x374>)
 80002f2:	f001 fcbc 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fc:	4870      	ldr	r0, [pc, #448]	; (80004c0 <display7SEG2+0x374>)
 80002fe:	f001 fcb6 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000308:	486d      	ldr	r0, [pc, #436]	; (80004c0 <display7SEG2+0x374>)
 800030a:	f001 fcb0 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000314:	486a      	ldr	r0, [pc, #424]	; (80004c0 <display7SEG2+0x374>)
 8000316:	f001 fcaa 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	4869      	ldr	r0, [pc, #420]	; (80004c4 <display7SEG2+0x378>)
 8000320:	f001 fca5 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 8000324:	e0f9      	b.n	800051a <display7SEG2+0x3ce>
	case 5:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000326:	2200      	movs	r2, #0
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	4865      	ldr	r0, [pc, #404]	; (80004c0 <display7SEG2+0x374>)
 800032c:	f001 fc9f 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000336:	4862      	ldr	r0, [pc, #392]	; (80004c0 <display7SEG2+0x374>)
 8000338:	f001 fc99 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000342:	485f      	ldr	r0, [pc, #380]	; (80004c0 <display7SEG2+0x374>)
 8000344:	f001 fc93 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034e:	485c      	ldr	r0, [pc, #368]	; (80004c0 <display7SEG2+0x374>)
 8000350:	f001 fc8d 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800035a:	4859      	ldr	r0, [pc, #356]	; (80004c0 <display7SEG2+0x374>)
 800035c:	f001 fc87 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000366:	4856      	ldr	r0, [pc, #344]	; (80004c0 <display7SEG2+0x374>)
 8000368:	f001 fc81 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	4854      	ldr	r0, [pc, #336]	; (80004c4 <display7SEG2+0x378>)
 8000372:	f001 fc7c 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 8000376:	e0d0      	b.n	800051a <display7SEG2+0x3ce>
	case 6:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	4850      	ldr	r0, [pc, #320]	; (80004c0 <display7SEG2+0x374>)
 800037e:	f001 fc76 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000388:	484d      	ldr	r0, [pc, #308]	; (80004c0 <display7SEG2+0x374>)
 800038a:	f001 fc70 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000394:	484a      	ldr	r0, [pc, #296]	; (80004c0 <display7SEG2+0x374>)
 8000396:	f001 fc6a 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a0:	4847      	ldr	r0, [pc, #284]	; (80004c0 <display7SEG2+0x374>)
 80003a2:	f001 fc64 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ac:	4844      	ldr	r0, [pc, #272]	; (80004c0 <display7SEG2+0x374>)
 80003ae:	f001 fc5e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b8:	4841      	ldr	r0, [pc, #260]	; (80004c0 <display7SEG2+0x374>)
 80003ba:	f001 fc58 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2101      	movs	r1, #1
 80003c2:	4840      	ldr	r0, [pc, #256]	; (80004c4 <display7SEG2+0x378>)
 80003c4:	f001 fc53 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 80003c8:	e0a7      	b.n	800051a <display7SEG2+0x3ce>
	case 7:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	483c      	ldr	r0, [pc, #240]	; (80004c0 <display7SEG2+0x374>)
 80003d0:	f001 fc4d 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003da:	4839      	ldr	r0, [pc, #228]	; (80004c0 <display7SEG2+0x374>)
 80003dc:	f001 fc47 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e6:	4836      	ldr	r0, [pc, #216]	; (80004c0 <display7SEG2+0x374>)
 80003e8:	f001 fc41 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f2:	4833      	ldr	r0, [pc, #204]	; (80004c0 <display7SEG2+0x374>)
 80003f4:	f001 fc3b 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fe:	4830      	ldr	r0, [pc, #192]	; (80004c0 <display7SEG2+0x374>)
 8000400:	f001 fc35 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040a:	482d      	ldr	r0, [pc, #180]	; (80004c0 <display7SEG2+0x374>)
 800040c:	f001 fc2f 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 8000410:	2201      	movs	r2, #1
 8000412:	2101      	movs	r1, #1
 8000414:	482b      	ldr	r0, [pc, #172]	; (80004c4 <display7SEG2+0x378>)
 8000416:	f001 fc2a 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 800041a:	e07e      	b.n	800051a <display7SEG2+0x3ce>
	case 8:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	4827      	ldr	r0, [pc, #156]	; (80004c0 <display7SEG2+0x374>)
 8000422:	f001 fc24 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800042c:	4824      	ldr	r0, [pc, #144]	; (80004c0 <display7SEG2+0x374>)
 800042e:	f001 fc1e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000438:	4821      	ldr	r0, [pc, #132]	; (80004c0 <display7SEG2+0x374>)
 800043a:	f001 fc18 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000444:	481e      	ldr	r0, [pc, #120]	; (80004c0 <display7SEG2+0x374>)
 8000446:	f001 fc12 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 0);
 800044a:	2200      	movs	r2, #0
 800044c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000450:	481b      	ldr	r0, [pc, #108]	; (80004c0 <display7SEG2+0x374>)
 8000452:	f001 fc0c 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045c:	4818      	ldr	r0, [pc, #96]	; (80004c0 <display7SEG2+0x374>)
 800045e:	f001 fc06 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2101      	movs	r1, #1
 8000466:	4817      	ldr	r0, [pc, #92]	; (80004c4 <display7SEG2+0x378>)
 8000468:	f001 fc01 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 800046c:	e055      	b.n	800051a <display7SEG2+0x3ce>
	case 9:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <display7SEG2+0x374>)
 8000474:	f001 fbfb 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047e:	4810      	ldr	r0, [pc, #64]	; (80004c0 <display7SEG2+0x374>)
 8000480:	f001 fbf5 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <display7SEG2+0x374>)
 800048c:	f001 fbef 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	480a      	ldr	r0, [pc, #40]	; (80004c0 <display7SEG2+0x374>)
 8000498:	f001 fbe9 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <display7SEG2+0x374>)
 80004a4:	f001 fbe3 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ae:	4804      	ldr	r0, [pc, #16]	; (80004c0 <display7SEG2+0x374>)
 80004b0:	f001 fbdd 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 0);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2101      	movs	r1, #1
 80004b8:	4802      	ldr	r0, [pc, #8]	; (80004c4 <display7SEG2+0x378>)
 80004ba:	f001 fbd8 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 80004be:	e02c      	b.n	800051a <display7SEG2+0x3ce>
 80004c0:	40010800 	.word	0x40010800
 80004c4:	40010c00 	.word	0x40010c00
	default:
		HAL_GPIO_WritePin(SEG2_0_GPIO_Port, SEG2_0_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	4815      	ldr	r0, [pc, #84]	; (8000524 <display7SEG2+0x3d8>)
 80004ce:	f001 fbce 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_1_GPIO_Port, SEG2_1_Pin, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <display7SEG2+0x3d8>)
 80004da:	f001 fbc8 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_2_GPIO_Port, SEG2_2_Pin, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <display7SEG2+0x3d8>)
 80004e6:	f001 fbc2 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_3_GPIO_Port, SEG2_3_Pin, 1);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <display7SEG2+0x3d8>)
 80004f2:	f001 fbbc 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_4_GPIO_Port, SEG2_4_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <display7SEG2+0x3d8>)
 80004fe:	f001 fbb6 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_5_GPIO_Port, SEG2_5_Pin, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <display7SEG2+0x3d8>)
 800050a:	f001 fbb0 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_6_GPIO_Port, SEG2_6_Pin, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	2101      	movs	r1, #1
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <display7SEG2+0x3dc>)
 8000514:	f001 fbab 	bl	8001c6e <HAL_GPIO_WritePin>
		break;
 8000518:	bf00      	nop
	}
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800
 8000528:	40010c00 	.word	0x40010c00

0800052c <fsm_traffic_led>:

void fsm_traffic_led() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (status_mode == AUTO_MODE) {
 8000530:	4b4c      	ldr	r3, [pc, #304]	; (8000664 <fsm_traffic_led+0x138>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	f040 8093 	bne.w	8000660 <fsm_traffic_led+0x134>
		if (state_led == 0) {
 800053a:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <fsm_traffic_led+0x13c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d131      	bne.n	80005a6 <fsm_traffic_led+0x7a>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	4848      	ldr	r0, [pc, #288]	; (800066c <fsm_traffic_led+0x140>)
 800054a:	f001 fb90 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	4845      	ldr	r0, [pc, #276]	; (800066c <fsm_traffic_led+0x140>)
 8000556:	f001 fb8a 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	2102      	movs	r1, #2
 800055e:	4844      	ldr	r0, [pc, #272]	; (8000670 <fsm_traffic_led+0x144>)
 8000560:	f001 fb85 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[0] - index_led);
 8000564:	4b43      	ldr	r3, [pc, #268]	; (8000674 <fsm_traffic_led+0x148>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b43      	ldr	r3, [pc, #268]	; (8000678 <fsm_traffic_led+0x14c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ff74 	bl	800145c <uart_communiation_fsm>
			control_mode = final_led_count[0] - index_led;
 8000574:	4b3f      	ldr	r3, [pc, #252]	; (8000674 <fsm_traffic_led+0x148>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b3f      	ldr	r3, [pc, #252]	; (8000678 <fsm_traffic_led+0x14c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	4a3f      	ldr	r2, [pc, #252]	; (800067c <fsm_traffic_led+0x150>)
 8000580:	6013      	str	r3, [r2, #0]
			index_led++;
 8000582:	4b3d      	ldr	r3, [pc, #244]	; (8000678 <fsm_traffic_led+0x14c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a3b      	ldr	r2, [pc, #236]	; (8000678 <fsm_traffic_led+0x14c>)
 800058a:	6013      	str	r3, [r2, #0]
			if (final_led_count[0] == index_led) {
 800058c:	4b39      	ldr	r3, [pc, #228]	; (8000674 <fsm_traffic_led+0x148>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b39      	ldr	r3, [pc, #228]	; (8000678 <fsm_traffic_led+0x14c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d163      	bne.n	8000660 <fsm_traffic_led+0x134>
				index_led = 0;
 8000598:	4b37      	ldr	r3, [pc, #220]	; (8000678 <fsm_traffic_led+0x14c>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
				state_led = 2;
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <fsm_traffic_led+0x13c>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	601a      	str	r2, [r3, #0]
				index_led = 0;
				state_led = 1;
			}
		}
	}
}
 80005a4:	e05c      	b.n	8000660 <fsm_traffic_led+0x134>
		} else if (state_led == 1) {
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <fsm_traffic_led+0x13c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d12a      	bne.n	8000604 <fsm_traffic_led+0xd8>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b4:	482d      	ldr	r0, [pc, #180]	; (800066c <fsm_traffic_led+0x140>)
 80005b6:	f001 fb5a 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c0:	482a      	ldr	r0, [pc, #168]	; (800066c <fsm_traffic_led+0x140>)
 80005c2:	f001 fb54 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	4829      	ldr	r0, [pc, #164]	; (8000670 <fsm_traffic_led+0x144>)
 80005cc:	f001 fb4f 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[1] - index_led);
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <fsm_traffic_led+0x148>)
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <fsm_traffic_led+0x14c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff3e 	bl	800145c <uart_communiation_fsm>
			index_led++;
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <fsm_traffic_led+0x14c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a24      	ldr	r2, [pc, #144]	; (8000678 <fsm_traffic_led+0x14c>)
 80005e8:	6013      	str	r3, [r2, #0]
			if (final_led_count[1] == index_led) {
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <fsm_traffic_led+0x148>)
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	4b22      	ldr	r3, [pc, #136]	; (8000678 <fsm_traffic_led+0x14c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d134      	bne.n	8000660 <fsm_traffic_led+0x134>
				index_led = 0;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <fsm_traffic_led+0x14c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
				state_led = 0;
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <fsm_traffic_led+0x13c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
}
 8000602:	e02d      	b.n	8000660 <fsm_traffic_led+0x134>
		} else if (state_led == 2) {
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <fsm_traffic_led+0x13c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d129      	bne.n	8000660 <fsm_traffic_led+0x134>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <fsm_traffic_led+0x140>)
 8000614:	f001 fb2b 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <fsm_traffic_led+0x140>)
 8000620:	f001 fb25 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <fsm_traffic_led+0x144>)
 800062a:	f001 fb20 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[2] - index_led);
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <fsm_traffic_led+0x148>)
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <fsm_traffic_led+0x14c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ff0f 	bl	800145c <uart_communiation_fsm>
			index_led++;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <fsm_traffic_led+0x14c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <fsm_traffic_led+0x14c>)
 8000646:	6013      	str	r3, [r2, #0]
			if (final_led_count[2] == index_led) {
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <fsm_traffic_led+0x148>)
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <fsm_traffic_led+0x14c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429a      	cmp	r2, r3
 8000652:	d105      	bne.n	8000660 <fsm_traffic_led+0x134>
				index_led = 0;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <fsm_traffic_led+0x14c>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
				state_led = 1;
 800065a:	4b03      	ldr	r3, [pc, #12]	; (8000668 <fsm_traffic_led+0x13c>)
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	2000005c 	.word	0x2000005c
 800066c:	40010c00 	.word	0x40010c00
 8000670:	40010800 	.word	0x40010800
 8000674:	20000018 	.word	0x20000018
 8000678:	20000060 	.word	0x20000060
 800067c:	20000058 	.word	0x20000058

08000680 <fsm_changeLed_btn2>:
void fsm_changeLed_btn2() {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	if (status_mode == MANUAL_MODE) {
 8000684:	4b5f      	ldr	r3, [pc, #380]	; (8000804 <fsm_changeLed_btn2+0x184>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d16c      	bne.n	8000766 <fsm_changeLed_btn2+0xe6>
		switch (led_mode) {
 800068c:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <fsm_changeLed_btn2+0x188>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b0d      	cmp	r3, #13
 8000692:	d048      	beq.n	8000726 <fsm_changeLed_btn2+0xa6>
 8000694:	2b0d      	cmp	r3, #13
 8000696:	f300 80a8 	bgt.w	80007ea <fsm_changeLed_btn2+0x16a>
 800069a:	2b0b      	cmp	r3, #11
 800069c:	d002      	beq.n	80006a4 <fsm_changeLed_btn2+0x24>
 800069e:	2b0c      	cmp	r3, #12
 80006a0:	d021      	beq.n	80006e6 <fsm_changeLed_btn2+0x66>
			if (isButtonPressed(1)) {
				led_mode = RED_MODE;
			}
			break;
		default:
			break;
 80006a2:	e0a2      	b.n	80007ea <fsm_changeLed_btn2+0x16a>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	4858      	ldr	r0, [pc, #352]	; (800080c <fsm_changeLed_btn2+0x18c>)
 80006ac:	f001 fadf 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b6:	4855      	ldr	r0, [pc, #340]	; (800080c <fsm_changeLed_btn2+0x18c>)
 80006b8:	f001 fad9 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	4853      	ldr	r0, [pc, #332]	; (8000810 <fsm_changeLed_btn2+0x190>)
 80006c2:	f001 fad4 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[0]);
 80006c6:	4b53      	ldr	r3, [pc, #332]	; (8000814 <fsm_changeLed_btn2+0x194>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fec6 	bl	800145c <uart_communiation_fsm>
			if (isButtonPressed(1)) {
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fae1 	bl	8000c98 <isButtonPressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	f000 8088 	beq.w	80007ee <fsm_changeLed_btn2+0x16e>
				led_mode = AMBER_MODE;
 80006de:	4b4a      	ldr	r3, [pc, #296]	; (8000808 <fsm_changeLed_btn2+0x188>)
 80006e0:	220c      	movs	r2, #12
 80006e2:	601a      	str	r2, [r3, #0]
			break;
 80006e4:	e083      	b.n	80007ee <fsm_changeLed_btn2+0x16e>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	4847      	ldr	r0, [pc, #284]	; (800080c <fsm_changeLed_btn2+0x18c>)
 80006ee:	f001 fabe 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	4844      	ldr	r0, [pc, #272]	; (800080c <fsm_changeLed_btn2+0x18c>)
 80006fa:	f001 fab8 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2102      	movs	r1, #2
 8000702:	4843      	ldr	r0, [pc, #268]	; (8000810 <fsm_changeLed_btn2+0x190>)
 8000704:	f001 fab3 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[1]);
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <fsm_changeLed_btn2+0x194>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fea5 	bl	800145c <uart_communiation_fsm>
			if (isButtonPressed(1)) {
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fac0 	bl	8000c98 <isButtonPressed>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d069      	beq.n	80007f2 <fsm_changeLed_btn2+0x172>
				led_mode = GREEN_MODE;
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <fsm_changeLed_btn2+0x188>)
 8000720:	220d      	movs	r2, #13
 8000722:	601a      	str	r2, [r3, #0]
			break;
 8000724:	e065      	b.n	80007f2 <fsm_changeLed_btn2+0x172>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072c:	4837      	ldr	r0, [pc, #220]	; (800080c <fsm_changeLed_btn2+0x18c>)
 800072e:	f001 fa9e 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000738:	4834      	ldr	r0, [pc, #208]	; (800080c <fsm_changeLed_btn2+0x18c>)
 800073a:	f001 fa98 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2102      	movs	r1, #2
 8000742:	4833      	ldr	r0, [pc, #204]	; (8000810 <fsm_changeLed_btn2+0x190>)
 8000744:	f001 fa93 	bl	8001c6e <HAL_GPIO_WritePin>
			uart_communiation_fsm(final_led_count[2]);
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <fsm_changeLed_btn2+0x194>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fe85 	bl	800145c <uart_communiation_fsm>
			if (isButtonPressed(1)) {
 8000752:	2001      	movs	r0, #1
 8000754:	f000 faa0 	bl	8000c98 <isButtonPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d04b      	beq.n	80007f6 <fsm_changeLed_btn2+0x176>
				led_mode = RED_MODE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <fsm_changeLed_btn2+0x188>)
 8000760:	220b      	movs	r2, #11
 8000762:	601a      	str	r2, [r3, #0]
			break;
 8000764:	e047      	b.n	80007f6 <fsm_changeLed_btn2+0x176>
		}
	} else if (status_mode == TUNING_MODE) {
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <fsm_changeLed_btn2+0x184>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d145      	bne.n	80007fa <fsm_changeLed_btn2+0x17a>
		switch (led_mode) {
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <fsm_changeLed_btn2+0x188>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b0d      	cmp	r3, #13
 8000774:	d028      	beq.n	80007c8 <fsm_changeLed_btn2+0x148>
 8000776:	2b0d      	cmp	r3, #13
 8000778:	dc41      	bgt.n	80007fe <fsm_changeLed_btn2+0x17e>
 800077a:	2b0b      	cmp	r3, #11
 800077c:	d002      	beq.n	8000784 <fsm_changeLed_btn2+0x104>
 800077e:	2b0c      	cmp	r3, #12
 8000780:	d011      	beq.n	80007a6 <fsm_changeLed_btn2+0x126>
				led_count[2]++;
			}
			uart_communiation_fsm(led_count[2]);
			break;
		default:
			break;
 8000782:	e03c      	b.n	80007fe <fsm_changeLed_btn2+0x17e>
			if (isButtonPressed(1)) {
 8000784:	2001      	movs	r0, #1
 8000786:	f000 fa87 	bl	8000c98 <isButtonPressed>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d004      	beq.n	800079a <fsm_changeLed_btn2+0x11a>
				led_count[0]++;
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <fsm_changeLed_btn2+0x198>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <fsm_changeLed_btn2+0x198>)
 8000798:	6013      	str	r3, [r2, #0]
			uart_communiation_fsm(led_count[0]);
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <fsm_changeLed_btn2+0x198>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe5c 	bl	800145c <uart_communiation_fsm>
			break;
 80007a4:	e02c      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			if (isButtonPressed(1)) {
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 fa76 	bl	8000c98 <isButtonPressed>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <fsm_changeLed_btn2+0x13c>
				led_count[1]++;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	3301      	adds	r3, #1
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007ba:	6053      	str	r3, [r2, #4]
			uart_communiation_fsm(led_count[1]);
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe4b 	bl	800145c <uart_communiation_fsm>
			break;
 80007c6:	e01b      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			if (isButtonPressed(1)) {
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fa65 	bl	8000c98 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d004      	beq.n	80007de <fsm_changeLed_btn2+0x15e>
				led_count[2]++;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007dc:	6093      	str	r3, [r2, #8]
			uart_communiation_fsm(led_count[2]);
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <fsm_changeLed_btn2+0x198>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fe3a 	bl	800145c <uart_communiation_fsm>
			break;
 80007e8:	e00a      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			break;
 80007ea:	bf00      	nop
 80007ec:	e008      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			break;
 80007ee:	bf00      	nop
 80007f0:	e006      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			break;
 80007f2:	bf00      	nop
 80007f4:	e004      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <fsm_changeLed_btn2+0x180>
		}
	}
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <fsm_changeLed_btn2+0x180>
			break;
 80007fe:	bf00      	nop
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	40010c00 	.word	0x40010c00
 8000810:	40010800 	.word	0x40010800
 8000814:	20000018 	.word	0x20000018
 8000818:	2000000c 	.word	0x2000000c

0800081c <fsm_changeMode_btn1>:
void fsm_changeMode_btn1() {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <fsm_changeMode_btn1+0x88>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d02a      	beq.n	800087e <fsm_changeMode_btn1+0x62>
 8000828:	2b03      	cmp	r3, #3
 800082a:	dc32      	bgt.n	8000892 <fsm_changeMode_btn1+0x76>
 800082c:	2b01      	cmp	r3, #1
 800082e:	d002      	beq.n	8000836 <fsm_changeMode_btn1+0x1a>
 8000830:	2b02      	cmp	r3, #2
 8000832:	d00e      	beq.n	8000852 <fsm_changeMode_btn1+0x36>
		if (isButtonPressed(0)) {
			status_mode = AUTO_MODE;
		}
		break;
	default:
		break;
 8000834:	e02d      	b.n	8000892 <fsm_changeMode_btn1+0x76>
		if (isButtonPressed(0)&&status_pedestrian_mode==5) {
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fa2e 	bl	8000c98 <isButtonPressed>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d029      	beq.n	8000896 <fsm_changeMode_btn1+0x7a>
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <fsm_changeMode_btn1+0x8c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b05      	cmp	r3, #5
 8000848:	d125      	bne.n	8000896 <fsm_changeMode_btn1+0x7a>
			status_mode = MANUAL_MODE;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <fsm_changeMode_btn1+0x88>)
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
		break;
 8000850:	e021      	b.n	8000896 <fsm_changeMode_btn1+0x7a>
		if (isButtonPressed(0)) {
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fa20 	bl	8000c98 <isButtonPressed>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01d      	beq.n	800089a <fsm_changeMode_btn1+0x7e>
			led_count[0] = final_led_count[0];
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <fsm_changeMode_btn1+0x90>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <fsm_changeMode_btn1+0x94>)
 8000864:	6013      	str	r3, [r2, #0]
			led_count[1] = final_led_count[1];
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <fsm_changeMode_btn1+0x90>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	4a11      	ldr	r2, [pc, #68]	; (80008b0 <fsm_changeMode_btn1+0x94>)
 800086c:	6053      	str	r3, [r2, #4]
			led_count[2] = final_led_count[2];
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <fsm_changeMode_btn1+0x90>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <fsm_changeMode_btn1+0x94>)
 8000874:	6093      	str	r3, [r2, #8]
			status_mode = TUNING_MODE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <fsm_changeMode_btn1+0x88>)
 8000878:	2203      	movs	r2, #3
 800087a:	601a      	str	r2, [r3, #0]
		break;
 800087c:	e00d      	b.n	800089a <fsm_changeMode_btn1+0x7e>
		if (isButtonPressed(0)) {
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fa0a 	bl	8000c98 <isButtonPressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d009      	beq.n	800089e <fsm_changeMode_btn1+0x82>
			status_mode = AUTO_MODE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <fsm_changeMode_btn1+0x88>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]
		break;
 8000890:	e005      	b.n	800089e <fsm_changeMode_btn1+0x82>
		break;
 8000892:	bf00      	nop
 8000894:	e004      	b.n	80008a0 <fsm_changeMode_btn1+0x84>
		break;
 8000896:	bf00      	nop
 8000898:	e002      	b.n	80008a0 <fsm_changeMode_btn1+0x84>
		break;
 800089a:	bf00      	nop
 800089c:	e000      	b.n	80008a0 <fsm_changeMode_btn1+0x84>
		break;
 800089e:	bf00      	nop
	}
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000018 	.word	0x20000018
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <fsm_modifyTime_btn3>:
void fsm_modifyTime_btn3() {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	if (status_mode == TUNING_MODE) {
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <fsm_modifyTime_btn3+0x7c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d12b      	bne.n	8000918 <fsm_modifyTime_btn3+0x64>
		switch (led_mode) {
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <fsm_modifyTime_btn3+0x80>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b0d      	cmp	r3, #13
 80008c6:	d01c      	beq.n	8000902 <fsm_modifyTime_btn3+0x4e>
 80008c8:	2b0d      	cmp	r3, #13
 80008ca:	dc27      	bgt.n	800091c <fsm_modifyTime_btn3+0x68>
 80008cc:	2b0b      	cmp	r3, #11
 80008ce:	d002      	beq.n	80008d6 <fsm_modifyTime_btn3+0x22>
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d00b      	beq.n	80008ec <fsm_modifyTime_btn3+0x38>
			if (isButtonPressed(2)) {
				final_led_count[2] = led_count[2];
			}
			break;
		default:
			break;
 80008d4:	e022      	b.n	800091c <fsm_modifyTime_btn3+0x68>
			if (isButtonPressed(2)) {
 80008d6:	2002      	movs	r0, #2
 80008d8:	f000 f9de 	bl	8000c98 <isButtonPressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d01e      	beq.n	8000920 <fsm_modifyTime_btn3+0x6c>
				final_led_count[0] = led_count[0];
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <fsm_modifyTime_btn3+0x84>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <fsm_modifyTime_btn3+0x88>)
 80008e8:	6013      	str	r3, [r2, #0]
			break;
 80008ea:	e019      	b.n	8000920 <fsm_modifyTime_btn3+0x6c>
			if (isButtonPressed(2)) {
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 f9d3 	bl	8000c98 <isButtonPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d015      	beq.n	8000924 <fsm_modifyTime_btn3+0x70>
				final_led_count[1] = led_count[1];
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <fsm_modifyTime_btn3+0x84>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <fsm_modifyTime_btn3+0x88>)
 80008fe:	6053      	str	r3, [r2, #4]
			break;
 8000900:	e010      	b.n	8000924 <fsm_modifyTime_btn3+0x70>
			if (isButtonPressed(2)) {
 8000902:	2002      	movs	r0, #2
 8000904:	f000 f9c8 	bl	8000c98 <isButtonPressed>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00c      	beq.n	8000928 <fsm_modifyTime_btn3+0x74>
				final_led_count[2] = led_count[2];
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <fsm_modifyTime_btn3+0x84>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <fsm_modifyTime_btn3+0x88>)
 8000914:	6093      	str	r3, [r2, #8]
			break;
 8000916:	e007      	b.n	8000928 <fsm_modifyTime_btn3+0x74>
		}
	}
 8000918:	bf00      	nop
 800091a:	e006      	b.n	800092a <fsm_modifyTime_btn3+0x76>
			break;
 800091c:	bf00      	nop
 800091e:	e004      	b.n	800092a <fsm_modifyTime_btn3+0x76>
			break;
 8000920:	bf00      	nop
 8000922:	e002      	b.n	800092a <fsm_modifyTime_btn3+0x76>
			break;
 8000924:	bf00      	nop
 8000926:	e000      	b.n	800092a <fsm_modifyTime_btn3+0x76>
			break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000000 	.word	0x20000000
 8000934:	20000008 	.word	0x20000008
 8000938:	2000000c 	.word	0x2000000c
 800093c:	20000018 	.word	0x20000018

08000940 <updateState>:
int updateState() {
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
	if (status_mode == AUTO_MODE) {
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <updateState+0x34>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d101      	bne.n	8000950 <updateState+0x10>
		return 1;
 800094c:	2301      	movs	r3, #1
 800094e:	e00d      	b.n	800096c <updateState+0x2c>
	} else if (status_mode == MANUAL_MODE) {
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <updateState+0x34>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d101      	bne.n	800095c <updateState+0x1c>
		return 2;
 8000958:	2302      	movs	r3, #2
 800095a:	e007      	b.n	800096c <updateState+0x2c>
	} else if (status_mode == TUNING_MODE) {
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <updateState+0x34>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d101      	bne.n	8000968 <updateState+0x28>
		return 3;
 8000964:	2303      	movs	r3, #3
 8000966:	e001      	b.n	800096c <updateState+0x2c>
	} else {
		return -1;
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000000 	.word	0x20000000

08000978 <led_blink>:
void led_blink() {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if (status_mode == TUNING_MODE) {
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <led_blink+0x94>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d13d      	bne.n	8000a00 <led_blink+0x88>
		switch (led_mode) {
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <led_blink+0x98>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b0d      	cmp	r3, #13
 800098a:	d028      	beq.n	80009de <led_blink+0x66>
 800098c:	2b0d      	cmp	r3, #13
 800098e:	dc39      	bgt.n	8000a04 <led_blink+0x8c>
 8000990:	2b0b      	cmp	r3, #11
 8000992:	d002      	beq.n	800099a <led_blink+0x22>
 8000994:	2b0c      	cmp	r3, #12
 8000996:	d011      	beq.n	80009bc <led_blink+0x44>
			HAL_GPIO_TogglePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin);
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
			break;
		default:
			break;
 8000998:	e034      	b.n	8000a04 <led_blink+0x8c>
			HAL_GPIO_TogglePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin);
 800099a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800099e:	481d      	ldr	r0, [pc, #116]	; (8000a14 <led_blink+0x9c>)
 80009a0:	f001 f97d 	bl	8001c9e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <led_blink+0x9c>)
 80009ac:	f001 f95f 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2102      	movs	r1, #2
 80009b4:	4818      	ldr	r0, [pc, #96]	; (8000a18 <led_blink+0xa0>)
 80009b6:	f001 f95a 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80009ba:	e024      	b.n	8000a06 <led_blink+0x8e>
			HAL_GPIO_TogglePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin);
 80009bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <led_blink+0x9c>)
 80009c2:	f001 f96c 	bl	8001c9e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	4811      	ldr	r0, [pc, #68]	; (8000a14 <led_blink+0x9c>)
 80009ce:	f001 f94e 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin, 1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2102      	movs	r1, #2
 80009d6:	4810      	ldr	r0, [pc, #64]	; (8000a18 <led_blink+0xa0>)
 80009d8:	f001 f949 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80009dc:	e013      	b.n	8000a06 <led_blink+0x8e>
			HAL_GPIO_TogglePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC_GREEN_Pin);
 80009de:	2102      	movs	r1, #2
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <led_blink+0xa0>)
 80009e2:	f001 f95c 	bl	8001c9e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC_AMBER_Pin, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <led_blink+0x9c>)
 80009ee:	f001 f93e 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin, 1);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <led_blink+0x9c>)
 80009fa:	f001 f938 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80009fe:	e002      	b.n	8000a06 <led_blink+0x8e>
		}
	}
 8000a00:	bf00      	nop
 8000a02:	e000      	b.n	8000a06 <led_blink+0x8e>
			break;
 8000a04:	bf00      	nop
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000008 	.word	0x20000008
 8000a14:	40010c00 	.word	0x40010c00
 8000a18:	40010800 	.word	0x40010800

08000a1c <fsm_pedestrian_btn4>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,
				50 + 5 * (10 - control_mode));
	}
}

void fsm_pedestrian_btn4() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	if (status_mode == AUTO_MODE) {
 8000a20:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <fsm_pedestrian_btn4+0x104>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d172      	bne.n	8000b0e <fsm_pedestrian_btn4+0xf2>
		switch (status_pedestrian_mode) {
 8000a28:	4b3e      	ldr	r3, [pc, #248]	; (8000b24 <fsm_pedestrian_btn4+0x108>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d01b      	beq.n	8000a68 <fsm_pedestrian_btn4+0x4c>
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d16e      	bne.n	8000b12 <fsm_pedestrian_btn4+0xf6>
		case PEDES_MODE_OFF:
			HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2120      	movs	r1, #32
 8000a38:	483b      	ldr	r0, [pc, #236]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a3a:	f001 f918 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a44:	4838      	ldr	r0, [pc, #224]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a46:	f001 f912 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	4836      	ldr	r0, [pc, #216]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a50:	f001 f90d 	bl	8001c6e <HAL_GPIO_WritePin>
			if (isButtonPressed(3)) {
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f91f 	bl	8000c98 <isButtonPressed>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d05a      	beq.n	8000b16 <fsm_pedestrian_btn4+0xfa>
				status_pedestrian_mode = PEDES_MODE_ON;
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <fsm_pedestrian_btn4+0x108>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a66:	e056      	b.n	8000b16 <fsm_pedestrian_btn4+0xfa>
		case PEDES_MODE_ON:
			if (HAL_GPIO_ReadPin(TRAFFIC_RED_GPIO_Port, TRAFFIC_RED_Pin) == 0) {
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	482f      	ldr	r0, [pc, #188]	; (8000b2c <fsm_pedestrian_btn4+0x110>)
 8000a6e:	f001 f8e7 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d110      	bne.n	8000a9a <fsm_pedestrian_btn4+0x7e>
				HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin,
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	482a      	ldr	r0, [pc, #168]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a7e:	f001 f8f6 	bl	8001c6e <HAL_GPIO_WritePin>
						1);
				HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a88:	4827      	ldr	r0, [pc, #156]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a8a:	f001 f8f0 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin,
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2110      	movs	r1, #16
 8000a92:	4825      	ldr	r0, [pc, #148]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000a94:	f001 f8eb 	bl	8001c6e <HAL_GPIO_WritePin>
 8000a98:	e02f      	b.n	8000afa <fsm_pedestrian_btn4+0xde>
						0);
//				buzzer_pedestrian();
			} else if (HAL_GPIO_ReadPin(TRAFFIC_AMBER_GPIO_Port,
 8000a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9e:	4823      	ldr	r0, [pc, #140]	; (8000b2c <fsm_pedestrian_btn4+0x110>)
 8000aa0:	f001 f8ce 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d110      	bne.n	8000acc <fsm_pedestrian_btn4+0xb0>
			TRAFFIC_AMBER_Pin) == 0) {
				HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin,
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2120      	movs	r1, #32
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000ab0:	f001 f8dd 	bl	8001c6e <HAL_GPIO_WritePin>
						0);
				HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	481b      	ldr	r0, [pc, #108]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000abc:	f001 f8d7 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin,
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4818      	ldr	r0, [pc, #96]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000ac6:	f001 f8d2 	bl	8001c6e <HAL_GPIO_WritePin>
 8000aca:	e016      	b.n	8000afa <fsm_pedestrian_btn4+0xde>
						1);
			} else if (HAL_GPIO_ReadPin(TRAFFIC_GREEN_GPIO_Port,
 8000acc:	2102      	movs	r1, #2
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000ad0:	f001 f8b6 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10f      	bne.n	8000afa <fsm_pedestrian_btn4+0xde>
			TRAFFIC_GREEN_Pin) == 0) {
				HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin,
 8000ada:	2201      	movs	r2, #1
 8000adc:	2120      	movs	r1, #32
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000ae0:	f001 f8c5 	bl	8001c6e <HAL_GPIO_WritePin>
						1);
				HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000aec:	f001 f8bf 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin,
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <fsm_pedestrian_btn4+0x10c>)
 8000af6:	f001 f8ba 	bl	8001c6e <HAL_GPIO_WritePin>
						1);
			}
			if (isButtonPressed(3)) {
 8000afa:	2003      	movs	r0, #3
 8000afc:	f000 f8cc 	bl	8000c98 <isButtonPressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d009      	beq.n	8000b1a <fsm_pedestrian_btn4+0xfe>
				status_pedestrian_mode = PEDES_MODE_OFF;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <fsm_pedestrian_btn4+0x108>)
 8000b08:	2205      	movs	r2, #5
 8000b0a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b0c:	e005      	b.n	8000b1a <fsm_pedestrian_btn4+0xfe>
		default:
			break;
		}
	}
 8000b0e:	bf00      	nop
 8000b10:	e004      	b.n	8000b1c <fsm_pedestrian_btn4+0x100>
			break;
 8000b12:	bf00      	nop
 8000b14:	e002      	b.n	8000b1c <fsm_pedestrian_btn4+0x100>
			break;
 8000b16:	bf00      	nop
 8000b18:	e000      	b.n	8000b1c <fsm_pedestrian_btn4+0x100>
			break;
 8000b1a:	bf00      	nop
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000004 	.word	0x20000004
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <fsm_init>:

int updateBuzzerState(){
	return status_pedestrian_mode;
}

void fsm_init() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRAFFIC2_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <fsm_init+0x48>)
 8000b3a:	f001 f898 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC2_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <fsm_init+0x48>)
 8000b46:	f001 f892 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC2_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <fsm_init+0x48>)
 8000b50:	f001 f88d 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC_AMBER_GPIO_Port, TRAFFIC2_AMBER_Pin, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2120      	movs	r1, #32
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <fsm_init+0x4c>)
 8000b5a:	f001 f888 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC_RED_GPIO_Port, TRAFFIC2_RED_Pin, 1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <fsm_init+0x4c>)
 8000b66:	f001 f882 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TRAFFIC_GREEN_GPIO_Port, TRAFFIC2_GREEN_Pin, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <fsm_init+0x48>)
 8000b70:	f001 f87d 	bl	8001c6e <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <button_reading>:
static GPIO_PinState debounceButtonBuffer2[N0_OF_BUTTONS];

static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];

void button_reading(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < N0_OF_BUTTONS; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	80fb      	strh	r3, [r7, #6]
 8000b8a:	e070      	b.n	8000c6e <button_reading+0xee>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000b8c:	88fa      	ldrh	r2, [r7, #6]
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	493b      	ldr	r1, [pc, #236]	; (8000c80 <button_reading+0x100>)
 8000b92:	5c89      	ldrb	r1, [r1, r2]
 8000b94:	4a3b      	ldr	r2, [pc, #236]	; (8000c84 <button_reading+0x104>)
 8000b96:	54d1      	strb	r1, [r2, r3]
		if (i == 0) {
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d109      	bne.n	8000bb2 <button_reading+0x32>
			debounceButtonBuffer1[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4839      	ldr	r0, [pc, #228]	; (8000c88 <button_reading+0x108>)
 8000ba4:	f001 f84c 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <button_reading+0x100>)
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	e025      	b.n	8000bfe <button_reading+0x7e>
			BUTTON1_Pin);
		} else if (i == 1) {
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d109      	bne.n	8000bcc <button_reading+0x4c>
			debounceButtonBuffer1[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	4832      	ldr	r0, [pc, #200]	; (8000c88 <button_reading+0x108>)
 8000bbe:	f001 f83f 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <button_reading+0x100>)
 8000bc8:	705a      	strb	r2, [r3, #1]
 8000bca:	e018      	b.n	8000bfe <button_reading+0x7e>
			BUTTON2_Pin);
		} else if (i == 2) {
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d109      	bne.n	8000be6 <button_reading+0x66>
			debounceButtonBuffer1[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,
 8000bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd6:	482c      	ldr	r0, [pc, #176]	; (8000c88 <button_reading+0x108>)
 8000bd8:	f001 f832 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <button_reading+0x100>)
 8000be2:	709a      	strb	r2, [r3, #2]
 8000be4:	e00b      	b.n	8000bfe <button_reading+0x7e>
			BUTTON3_Pin);
		} else if (i == 3) {
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d108      	bne.n	8000bfe <button_reading+0x7e>
			debounceButtonBuffer1[3] = HAL_GPIO_ReadPin(BUTTON4_GPIO_Port,
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	4825      	ldr	r0, [pc, #148]	; (8000c88 <button_reading+0x108>)
 8000bf2:	f001 f825 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <button_reading+0x100>)
 8000bfc:	70da      	strb	r2, [r3, #3]
			BUTTON4_Pin);
		}
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <button_reading+0x100>)
 8000c02:	5cd2      	ldrb	r2, [r2, r3]
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	491f      	ldr	r1, [pc, #124]	; (8000c84 <button_reading+0x104>)
 8000c08:	5ccb      	ldrb	r3, [r1, r3]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d105      	bne.n	8000c1a <button_reading+0x9a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	491b      	ldr	r1, [pc, #108]	; (8000c80 <button_reading+0x100>)
 8000c14:	5c89      	ldrb	r1, [r1, r2]
 8000c16:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <button_reading+0x10c>)
 8000c18:	54d1      	strb	r1, [r2, r3]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <button_reading+0x10c>)
 8000c1e:	5cd3      	ldrb	r3, [r2, r3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d118      	bne.n	8000c56 <button_reading+0xd6>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <button_reading+0x110>)
 8000c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2c:	2b31      	cmp	r3, #49	; 0x31
 8000c2e:	d80d      	bhi.n	8000c4c <button_reading+0xcc>
				flagForButtonPress1s[i] = 0;
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <button_reading+0x114>)
 8000c34:	2100      	movs	r1, #0
 8000c36:	54d1      	strb	r1, [r2, r3]
				counterForButtonPress1s[i]++;
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <button_reading+0x110>)
 8000c3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c40:	3201      	adds	r2, #1
 8000c42:	b291      	uxth	r1, r2
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <button_reading+0x110>)
 8000c46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c4a:	e00d      	b.n	8000c68 <button_reading+0xe8>
			} else {
				flagForButtonPress1s[i] = 1;
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <button_reading+0x114>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	54d1      	strb	r1, [r2, r3]
 8000c54:	e008      	b.n	8000c68 <button_reading+0xe8>
			}
		} else {
			flagForButtonPress1s[i] = 0;
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <button_reading+0x114>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	54d1      	strb	r1, [r2, r3]
			counterForButtonPress1s[i] = 0;
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <button_reading+0x110>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < N0_OF_BUTTONS; i++) {
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	80fb      	strh	r3, [r7, #6]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d98b      	bls.n	8000b8c <button_reading+0xc>
		}
	}
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000068 	.word	0x20000068
 8000c84:	2000006c 	.word	0x2000006c
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	20000064 	.word	0x20000064
 8000c90:	20000074 	.word	0x20000074
 8000c94:	20000070 	.word	0x20000070

08000c98 <isButtonPressed>:

int isButtonPressed(int index) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	dd01      	ble.n	8000caa <isButtonPressed+0x12>
		return 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e008      	b.n	8000cbc <isButtonPressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <isButtonPressed+0x30>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bf0c      	ite	eq
 8000cb6:	2301      	moveq	r3, #1
 8000cb8:	2300      	movne	r3, #0
 8000cba:	b2db      	uxtb	r3, r3
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000064 	.word	0x20000064

08000ccc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cd0:	f000 fc12 	bl	80014f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cd4:	f000 f84a 	bl	8000d6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd8:	f000 f976 	bl	8000fc8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000cdc:	f000 f888 	bl	8000df0 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000ce0:	f000 f948 	bl	8000f74 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8000ce4:	f000 f8d0 	bl	8000e88 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <main+0x90>)
 8000cea:	f001 fc5b 	bl	80025a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <main+0x94>)
 8000cf2:	f001 fd01 	bl	80026f8 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	setTimer1(51);
 8000cf6:	2033      	movs	r0, #51	; 0x33
 8000cf8:	f000 fb2a 	bl	8001350 <setTimer1>
	setTimer2(49);
 8000cfc:	2031      	movs	r0, #49	; 0x31
 8000cfe:	f000 fb3b 	bl	8001378 <setTimer2>
	setTimer3(97);
 8000d02:	2061      	movs	r0, #97	; 0x61
 8000d04:	f000 fb4c 	bl	80013a0 <setTimer3>
	fsm_init();
 8000d08:	f7ff ff12 	bl	8000b30 <fsm_init>
	while (1) {
		if (timer1_flag) {
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <main+0x98>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0fb      	beq.n	8000d0c <main+0x40>
			fsm_changeMode_btn1();
 8000d14:	f7ff fd82 	bl	800081c <fsm_changeMode_btn1>
			fsm_changeLed_btn2();
 8000d18:	f7ff fcb2 	bl	8000680 <fsm_changeLed_btn2>
			fsm_modifyTime_btn3();
 8000d1c:	f7ff fdca 	bl	80008b4 <fsm_modifyTime_btn3>
			if (updateState() == AUTO_MODE) {
 8000d20:	f7ff fe0e 	bl	8000940 <updateState>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10c      	bne.n	8000d44 <main+0x78>
				setTimer1(100);
 8000d2a:	2064      	movs	r0, #100	; 0x64
 8000d2c:	f000 fb10 	bl	8001350 <setTimer1>
				fsm_traffic_led();
 8000d30:	f7ff fbfc 	bl	800052c <fsm_traffic_led>
				fsm_pedestrian_btn4();
 8000d34:	f7ff fe72 	bl	8000a1c <fsm_pedestrian_btn4>
				display7SEG2(status_mode);
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <main+0x9c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa05 	bl	800014c <display7SEG2>
 8000d42:	e7e3      	b.n	8000d0c <main+0x40>
			} else {
				setTimer1(50);
 8000d44:	2032      	movs	r0, #50	; 0x32
 8000d46:	f000 fb03 	bl	8001350 <setTimer1>
				led_blink();
 8000d4a:	f7ff fe15 	bl	8000978 <led_blink>
				display7SEG2(status_mode);
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <main+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff f9fa 	bl	800014c <display7SEG2>
		if (timer1_flag) {
 8000d58:	e7d8      	b.n	8000d0c <main+0x40>
 8000d5a:	bf00      	nop
 8000d5c:	2000007c 	.word	0x2000007c
 8000d60:	200000c4 	.word	0x200000c4
 8000d64:	20000154 	.word	0x20000154
 8000d68:	20000000 	.word	0x20000000

08000d6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b090      	sub	sp, #64	; 0x40
 8000d70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d72:	f107 0318 	add.w	r3, r7, #24
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 f836 	bl	8003dec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d96:	2310      	movs	r3, #16
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000da2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 ff8f 	bl	8001cd0 <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x50>
		Error_Handler();
 8000db8:	f000 f982 	bl	80010c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dcc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f9fc 	bl	80021d4 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x7a>
		Error_Handler();
 8000de2:	f000 f96d 	bl	80010c0 <Error_Handler>
	}
}
 8000de6:	bf00      	nop
 8000de8:	3740      	adds	r7, #64	; 0x40
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e12:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e16:	223f      	movs	r2, #63	; 0x3f
 8000e18:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9999;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e22:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e26:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e36:	f001 fb65 	bl	8002504 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000e40:	f000 f93e 	bl	80010c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e52:	f001 feb9 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000e5c:	f000 f930 	bl	80010c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e6e:	f002 fa37 	bl	80032e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000e78:	f000 f922 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000007c 	.word	0x2000007c

08000e88 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000eba:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <MX_TIM3_Init+0xe8>)
 8000ebc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 63;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ec0:	223f      	movs	r2, #63	; 0x3f
 8000ec2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9999;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ecc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ed0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000ede:	4823      	ldr	r0, [pc, #140]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ee0:	f001 fb10 	bl	8002504 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x66>
		Error_Handler();
 8000eea:	f000 f8e9 	bl	80010c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481c      	ldr	r0, [pc, #112]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000efc:	f001 fe64 	bl	8002bc8 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x82>
		Error_Handler();
 8000f06:	f000 f8db 	bl	80010c0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f0c:	f001 fb9c 	bl	8002648 <HAL_TIM_PWM_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x92>
		Error_Handler();
 8000f16:	f000 f8d3 	bl	80010c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	4619      	mov	r1, r3
 8000f28:	4810      	ldr	r0, [pc, #64]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f2a:	f002 f9d9 	bl	80032e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000f34:	f000 f8c4 	bl	80010c0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f38:	2360      	movs	r3, #96	; 0x60
 8000f3a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f50:	f001 fd7c 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000f5a:	f000 f8b1 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f60:	f000 f926 	bl	80011b0 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3738      	adds	r7, #56	; 0x38
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000c4 	.word	0x200000c4
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f84:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fac:	f002 fa08 	bl	80033c0 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000fb6:	f000 f883 	bl	80010c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000010c 	.word	0x2000010c
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0320 	and.w	r3, r3, #32
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_GPIO_Init+0xd4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <MX_GPIO_Init+0xd4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_GPIO_Init+0xd4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_GPIO_Init+0xd4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <MX_GPIO_Init+0xd4>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_GPIO_Init+0xd4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001024:	2200      	movs	r2, #0
 8001026:	f649 71b2 	movw	r1, #40882	; 0x9fb2
 800102a:	481d      	ldr	r0, [pc, #116]	; (80010a0 <MX_GPIO_Init+0xd8>)
 800102c:	f000 fe1f 	bl	8001c6e <HAL_GPIO_WritePin>
					| SEG2_0_Pin | SEG2_1_Pin | SEG2_2_Pin | SEG2_3_Pin
					| SEG2_4_Pin | TRAFFIC2_RED_Pin | SEG2_5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001030:	2200      	movs	r2, #0
 8001032:	f24b 01ff 	movw	r1, #45311	; 0xb0ff
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <MX_GPIO_Init+0xdc>)
 8001038:	f000 fe19 	bl	8001c6e <HAL_GPIO_WritePin>
					| SEG1_5_Pin | SEG1_6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : TRAFFIC_GREEN_Pin TRAFFIC2_GREEN_Pin TRAFFIC2_AMBER_Pin SEG2_0_Pin
	 SEG2_1_Pin SEG2_2_Pin SEG2_3_Pin SEG2_4_Pin
	 TRAFFIC2_RED_Pin SEG2_5_Pin */
	GPIO_InitStruct.Pin = TRAFFIC_GREEN_Pin | TRAFFIC2_GREEN_Pin
 800103c:	f649 73b2 	movw	r3, #40882	; 0x9fb2
 8001040:	613b      	str	r3, [r7, #16]
			| TRAFFIC2_AMBER_Pin | SEG2_0_Pin | SEG2_1_Pin | SEG2_2_Pin
			| SEG2_3_Pin | SEG2_4_Pin | TRAFFIC2_RED_Pin | SEG2_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_GPIO_Init+0xd8>)
 8001056:	f000 fc6f 	bl	8001938 <HAL_GPIO_Init>

	/*Configure GPIO pins : SEG2_6_Pin SEG1_0_Pin SEG1_1_Pin TRAFFIC_RED_Pin
	 LED_RED_Pin TRAFFIC_AMBER_Pin SEG1_2_Pin SEG1_3_Pin
	 SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin */
	GPIO_InitStruct.Pin = SEG2_6_Pin | SEG1_0_Pin | SEG1_1_Pin | TRAFFIC_RED_Pin
 800105a:	f24b 03ff 	movw	r3, #45311	; 0xb0ff
 800105e:	613b      	str	r3, [r7, #16]
			| LED_RED_Pin | TRAFFIC_AMBER_Pin | SEG1_2_Pin | SEG1_3_Pin
			| SEG1_4_Pin | SEG1_5_Pin | SEG1_6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_GPIO_Init+0xdc>)
 8001074:	f000 fc60 	bl	8001938 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin BUTTON1_Pin */
	GPIO_InitStruct.Pin = BUTTON2_Pin | BUTTON3_Pin | BUTTON4_Pin | BUTTON1_Pin;
 8001078:	f44f 439c 	mov.w	r3, #19968	; 0x4e00
 800107c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_GPIO_Init+0xdc>)
 800108e:	f000 fc53 	bl	8001938 <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	timerRun();
 80010b0:	f000 f98a 	bl	80013c8 <timerRun>
	button_reading();
 80010b4:	f7ff fd64 	bl	8000b80 <button_reading>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_MspInit+0x5c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <HAL_MspInit+0x5c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_MspInit+0x5c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_MspInit+0x5c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <HAL_MspInit+0x5c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_MspInit+0x5c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_MspInit+0x60>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_MspInit+0x60>)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001140:	d114      	bne.n	800116c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	201c      	movs	r0, #28
 8001160:	f000 fb03 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001164:	201c      	movs	r0, #28
 8001166:	f000 fb1c 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800116a:	e018      	b.n	800119e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_Base_MspInit+0x7c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d113      	bne.n	800119e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_TIM_Base_MspInit+0x78>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	201d      	movs	r0, #29
 8001194:	f000 fae9 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001198:	201d      	movs	r0, #29
 800119a:	f000 fb02 	bl	80017a2 <HAL_NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40000400 	.word	0x40000400

080011b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_TIM_MspPostInit+0x58>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d117      	bne.n	8001200 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_TIM_MspPostInit+0x5c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_TIM_MspPostInit+0x5c>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_TIM_MspPostInit+0x5c>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011e8:	2340      	movs	r3, #64	; 0x40
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_TIM_MspPostInit+0x60>)
 80011fc:	f000 fb9c 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40000400 	.word	0x40000400
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <HAL_UART_MspInit+0x98>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d137      	bne.n	80012a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 800123a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800123e:	61d3      	str	r3, [r2, #28]
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001264:	2304      	movs	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4619      	mov	r1, r3
 8001276:	480f      	ldr	r0, [pc, #60]	; (80012b4 <HAL_UART_MspInit+0xa0>)
 8001278:	f000 fb5e 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800127c:	2308      	movs	r3, #8
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4809      	ldr	r0, [pc, #36]	; (80012b4 <HAL_UART_MspInit+0xa0>)
 8001290:	f000 fb52 	bl	8001938 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2026      	movs	r0, #38	; 0x26
 800129a:	f000 fa66 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800129e:	2026      	movs	r0, #38	; 0x26
 80012a0:	f000 fa7f 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40004400 	.word	0x40004400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f941 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <TIM2_IRQHandler+0x10>)
 800130e:	f001 fa95 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000007c 	.word	0x2000007c

0800131c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM3_IRQHandler+0x10>)
 8001322:	f001 fa8b 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000c4 	.word	0x200000c4

08001330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART2_IRQHandler+0x10>)
 8001336:	f002 f923 	bl	8003580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000010c 	.word	0x2000010c

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration) {
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <setTimer1+0x20>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <setTimer1+0x24>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000150 	.word	0x20000150
 8001374:	20000154 	.word	0x20000154

08001378 <setTimer2>:
void setTimer2(int duration) {
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001380:	4a05      	ldr	r2, [pc, #20]	; (8001398 <setTimer2+0x20>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <setTimer2+0x24>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000158 	.word	0x20000158
 800139c:	2000015c 	.word	0x2000015c

080013a0 <setTimer3>:
void setTimer3(int duration) {
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <setTimer3+0x20>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <setTimer3+0x24>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000160 	.word	0x20000160
 80013c4:	20000164 	.word	0x20000164

080013c8 <timerRun>:
void setTimer4(int duration) {
	timer4_counter = duration;
	timer4_flag = 0;
}
void timerRun() {
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <timerRun+0x74>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd05      	ble.n	80013e0 <timerRun+0x18>
		timer1_counter--;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <timerRun+0x74>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <timerRun+0x74>)
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e002      	b.n	80013e6 <timerRun+0x1e>
	} else {
		timer1_flag = 1;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <timerRun+0x78>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <timerRun+0x7c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd05      	ble.n	80013fa <timerRun+0x32>
		timer2_counter--;
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <timerRun+0x7c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <timerRun+0x7c>)
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e002      	b.n	8001400 <timerRun+0x38>
	} else {
		timer2_flag = 1;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <timerRun+0x80>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <timerRun+0x84>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd05      	ble.n	8001414 <timerRun+0x4c>
		timer3_counter--;
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <timerRun+0x84>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3b01      	subs	r3, #1
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <timerRun+0x84>)
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e002      	b.n	800141a <timerRun+0x52>
	} else {
		timer3_flag = 1;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <timerRun+0x88>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
	}
	if (timer4_counter > 0) {
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <timerRun+0x8c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	dd05      	ble.n	800142e <timerRun+0x66>
		timer4_counter--;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <timerRun+0x8c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3b01      	subs	r3, #1
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <timerRun+0x8c>)
 800142a:	6013      	str	r3, [r2, #0]
	} else {
		timer4_flag = 1;
	}
}
 800142c:	e002      	b.n	8001434 <timerRun+0x6c>
		timer4_flag = 1;
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <timerRun+0x90>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000150 	.word	0x20000150
 8001440:	20000154 	.word	0x20000154
 8001444:	20000158 	.word	0x20000158
 8001448:	2000015c 	.word	0x2000015c
 800144c:	20000160 	.word	0x20000160
 8001450:	20000164 	.word	0x20000164
 8001454:	20000168 	.word	0x20000168
 8001458:	2000016c 	.word	0x2000016c

0800145c <uart_communiation_fsm>:
uint32_t ADC_value = 0;
unsigned char ADC_buffer[MAX_BUFFER_SIZE];
unsigned char start_str[] = "!7SEG=";
unsigned char end_str[] = "#\n";

void uart_communiation_fsm(int value) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
//	switch (sensor_reading_state) {
//	case NONE:
//		if (start_response_ADC_value()) {
//	ADC_value = HAL_ADC_GetValue(&hadc1);
	itoa(value, &ADC_buffer[0], 10);
 8001464:	220a      	movs	r2, #10
 8001466:	490d      	ldr	r1, [pc, #52]	; (800149c <uart_communiation_fsm+0x40>)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f002 fcbd 	bl	8003de8 <itoa>
//	sensor_reading_state = SEND;
//		}
//		break;
//	case SEND:
//		if (timer_flag) {
	HAL_UART_Transmit(&huart2, start_str, sizeof(start_str),
 800146e:	2346      	movs	r3, #70	; 0x46
 8001470:	2207      	movs	r2, #7
 8001472:	490b      	ldr	r1, [pc, #44]	; (80014a0 <uart_communiation_fsm+0x44>)
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <uart_communiation_fsm+0x48>)
 8001476:	f001 fff0 	bl	800345a <HAL_UART_Transmit>
			sizeof(start_str) * 10);
	HAL_UART_Transmit(&huart2, ADC_buffer, sizeof(ADC_buffer),
 800147a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800147e:	221e      	movs	r2, #30
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <uart_communiation_fsm+0x40>)
 8001482:	4808      	ldr	r0, [pc, #32]	; (80014a4 <uart_communiation_fsm+0x48>)
 8001484:	f001 ffe9 	bl	800345a <HAL_UART_Transmit>
			sizeof(ADC_buffer) * 10);
	HAL_UART_Transmit(&huart2, end_str, sizeof(end_str), sizeof(end_str) * 10);
 8001488:	231e      	movs	r3, #30
 800148a:	2203      	movs	r2, #3
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <uart_communiation_fsm+0x4c>)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <uart_communiation_fsm+0x48>)
 8001490:	f001 ffe3 	bl	800345a <HAL_UART_Transmit>
//		break;
//	case END:
//		timer_flag = 0;
//		break;
//	}
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000170 	.word	0x20000170
 80014a0:	20000028 	.word	0x20000028
 80014a4:	2000010c 	.word	0x2000010c
 80014a8:	20000030 	.word	0x20000030

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014d2:	f7ff ff37 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f002 fc4b 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7ff fbf7 	bl	8000ccc <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80014e8:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 80014ec:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80014f0:	20000194 	.word	0x20000194

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f923 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fdda 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f93b 	bl	80017be <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f903 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000024 	.word	0x20000024
 800157c:	20000038 	.word	0x20000038
 8001580:	20000034 	.word	0x20000034

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000038 	.word	0x20000038
 80015a4:	20000190 	.word	0x20000190

080015a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20000190 	.word	0x20000190

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d008      	beq.n	80017fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e020      	b.n	8001840 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 020e 	bic.w	r2, r2, #14
 800180c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185e:	2b02      	cmp	r3, #2
 8001860:	d005      	beq.n	800186e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e051      	b.n	8001912 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 020e 	bic.w	r2, r2, #14
 800187c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_DMA_Abort_IT+0xd0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d029      	beq.n	80018ec <HAL_DMA_Abort_IT+0xa0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_DMA_Abort_IT+0xd4>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d022      	beq.n	80018e8 <HAL_DMA_Abort_IT+0x9c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <HAL_DMA_Abort_IT+0xd8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d01a      	beq.n	80018e2 <HAL_DMA_Abort_IT+0x96>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_DMA_Abort_IT+0xdc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d012      	beq.n	80018dc <HAL_DMA_Abort_IT+0x90>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1c      	ldr	r2, [pc, #112]	; (800192c <HAL_DMA_Abort_IT+0xe0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00a      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x8a>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_DMA_Abort_IT+0xe4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d102      	bne.n	80018d0 <HAL_DMA_Abort_IT+0x84>
 80018ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018ce:	e00e      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d4:	e00b      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018da:	e008      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e0:	e005      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e6:	e002      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018e8:	2310      	movs	r3, #16
 80018ea:	e000      	b.n	80018ee <HAL_DMA_Abort_IT+0xa2>
 80018ec:	2301      	movs	r3, #1
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_DMA_Abort_IT+0xe8>)
 80018f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
    } 
  }
  return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020008 	.word	0x40020008
 8001920:	4002001c 	.word	0x4002001c
 8001924:	40020030 	.word	0x40020030
 8001928:	40020044 	.word	0x40020044
 800192c:	40020058 	.word	0x40020058
 8001930:	4002006c 	.word	0x4002006c
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b08b      	sub	sp, #44	; 0x2c
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	e169      	b.n	8001c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800194c:	2201      	movs	r2, #1
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8158 	bne.w	8001c1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a9a      	ldr	r2, [pc, #616]	; (8001bd8 <HAL_GPIO_Init+0x2a0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d05e      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
 8001974:	4a98      	ldr	r2, [pc, #608]	; (8001bd8 <HAL_GPIO_Init+0x2a0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d875      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 800197a:	4a98      	ldr	r2, [pc, #608]	; (8001bdc <HAL_GPIO_Init+0x2a4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d058      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
 8001980:	4a96      	ldr	r2, [pc, #600]	; (8001bdc <HAL_GPIO_Init+0x2a4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d86f      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 8001986:	4a96      	ldr	r2, [pc, #600]	; (8001be0 <HAL_GPIO_Init+0x2a8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d052      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
 800198c:	4a94      	ldr	r2, [pc, #592]	; (8001be0 <HAL_GPIO_Init+0x2a8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d869      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 8001992:	4a94      	ldr	r2, [pc, #592]	; (8001be4 <HAL_GPIO_Init+0x2ac>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d04c      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
 8001998:	4a92      	ldr	r2, [pc, #584]	; (8001be4 <HAL_GPIO_Init+0x2ac>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d863      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 800199e:	4a92      	ldr	r2, [pc, #584]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d046      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
 80019a4:	4a90      	ldr	r2, [pc, #576]	; (8001be8 <HAL_GPIO_Init+0x2b0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d85d      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d82a      	bhi.n	8001a04 <HAL_GPIO_Init+0xcc>
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d859      	bhi.n	8001a66 <HAL_GPIO_Init+0x12e>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <HAL_GPIO_Init+0x80>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	08001a33 	.word	0x08001a33
 80019bc:	08001a0d 	.word	0x08001a0d
 80019c0:	08001a1f 	.word	0x08001a1f
 80019c4:	08001a61 	.word	0x08001a61
 80019c8:	08001a67 	.word	0x08001a67
 80019cc:	08001a67 	.word	0x08001a67
 80019d0:	08001a67 	.word	0x08001a67
 80019d4:	08001a67 	.word	0x08001a67
 80019d8:	08001a67 	.word	0x08001a67
 80019dc:	08001a67 	.word	0x08001a67
 80019e0:	08001a67 	.word	0x08001a67
 80019e4:	08001a67 	.word	0x08001a67
 80019e8:	08001a67 	.word	0x08001a67
 80019ec:	08001a67 	.word	0x08001a67
 80019f0:	08001a67 	.word	0x08001a67
 80019f4:	08001a67 	.word	0x08001a67
 80019f8:	08001a67 	.word	0x08001a67
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a29 	.word	0x08001a29
 8001a04:	4a79      	ldr	r2, [pc, #484]	; (8001bec <HAL_GPIO_Init+0x2b4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a0a:	e02c      	b.n	8001a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e029      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e024      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	3308      	adds	r3, #8
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e01f      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e01a      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e013      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	611a      	str	r2, [r3, #16]
          break;
 8001a52:	e009      	b.n	8001a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	615a      	str	r2, [r3, #20]
          break;
 8001a5e:	e003      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x130>
          break;
 8001a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d801      	bhi.n	8001a72 <HAL_GPIO_Init+0x13a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_Init+0x13e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	; 0xff
 8001a7c:	d802      	bhi.n	8001a84 <HAL_GPIO_Init+0x14c>
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	e002      	b.n	8001a8a <HAL_GPIO_Init+0x152>
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	3b08      	subs	r3, #8
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	210f      	movs	r1, #15
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 80b1 	beq.w	8001c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab8:	4b4d      	ldr	r3, [pc, #308]	; (8001bf0 <HAL_GPIO_Init+0x2b8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x2b8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_GPIO_Init+0x2b8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2bc>)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <HAL_GPIO_Init+0x2c0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3f      	ldr	r2, [pc, #252]	; (8001bfc <HAL_GPIO_Init+0x2c4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1e8>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <HAL_GPIO_Init+0x2c8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1e4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3d      	ldr	r2, [pc, #244]	; (8001c04 <HAL_GPIO_Init+0x2cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1e0>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x1ee>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e004      	b.n	8001b26 <HAL_GPIO_Init+0x1ee>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x1ee>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_GPIO_Init+0x1ee>
 8001b24:	2300      	movs	r3, #0
 8001b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b36:	492f      	ldr	r1, [pc, #188]	; (8001bf4 <HAL_GPIO_Init+0x2bc>)
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	492c      	ldr	r1, [pc, #176]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4928      	ldr	r1, [pc, #160]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4922      	ldr	r1, [pc, #136]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	491e      	ldr	r1, [pc, #120]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4918      	ldr	r1, [pc, #96]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4914      	ldr	r1, [pc, #80]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d021      	beq.n	8001c0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e021      	b.n	8001c1a <HAL_GPIO_Init+0x2e2>
 8001bd6:	bf00      	nop
 8001bd8:	10320000 	.word	0x10320000
 8001bdc:	10310000 	.word	0x10310000
 8001be0:	10220000 	.word	0x10220000
 8001be4:	10210000 	.word	0x10210000
 8001be8:	10120000 	.word	0x10120000
 8001bec:	10110000 	.word	0x10110000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40011400 	.word	0x40011400
 8001c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4909      	ldr	r1, [pc, #36]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f47f ae8e 	bne.w	800194c <HAL_GPIO_Init+0x14>
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	372c      	adds	r7, #44	; 0x2c
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7e:	787b      	ldrb	r3, [r7, #1]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c8a:	e003      	b.n	8001c94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e272      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8087 	beq.w	8001dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d00c      	beq.n	8001d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d112      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5e>
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d10b      	bne.n	8001d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d16:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d06c      	beq.n	8001dfc <HAL_RCC_OscConfig+0x12c>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d168      	bne.n	8001dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e24c      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x76>
 8001d38:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a7f      	ldr	r2, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	e02e      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7a      	ldr	r2, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e01d      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0xbc>
 8001d72:	4b72      	ldr	r3, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a71      	ldr	r2, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a6e      	ldr	r2, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0xd4>
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6a      	ldr	r2, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a67      	ldr	r2, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff fbfc 	bl	80015a8 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fbf8 	bl	80015a8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e200      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0xe4>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fbe8 	bl	80015a8 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fbe4 	bl	80015a8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1ec      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x10c>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d063      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0a:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d11c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x18c>
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d116      	bne.n	8001e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x176>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e1c0      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4939      	ldr	r1, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	e03a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d020      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_OscConfig+0x270>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb9d 	bl	80015a8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff fb99 	bl	80015a8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1a1      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4927      	ldr	r1, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fb7c 	bl	80015a8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fb78 	bl	80015a8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e180      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03a      	beq.n	8001f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d019      	beq.n	8001f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eec:	f7ff fb5c 	bl	80015a8 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7ff fb58 	bl	80015a8 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e160      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f000 fad8 	bl	80024c8 <RCC_Delay>
 8001f18:	e01c      	b.n	8001f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fb42 	bl	80015a8 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f26:	e00f      	b.n	8001f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fb3e 	bl	80015a8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d908      	bls.n	8001f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e146      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	42420000 	.word	0x42420000
 8001f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e9      	bne.n	8001f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a6 	beq.w	80020ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10d      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_OscConfig+0x4c8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b7f      	ldr	r3, [pc, #508]	; (8002198 <HAL_RCC_OscConfig+0x4c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a7e      	ldr	r2, [pc, #504]	; (8002198 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff faff 	bl	80015a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff fafb 	bl	80015a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b64      	cmp	r3, #100	; 0x64
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e103      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b75      	ldr	r3, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x4c8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x312>
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e02d      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x334>
 8001fea:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0304 	bic.w	r3, r3, #4
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	e01c      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x356>
 800200c:	4b61      	ldr	r3, [pc, #388]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	4b5e      	ldr	r3, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x36e>
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a5a      	ldr	r2, [pc, #360]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b58      	ldr	r3, [pc, #352]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d015      	beq.n	8002072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff faaf 	bl	80015a8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff faab 	bl	80015a8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0b1      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ee      	beq.n	800204e <HAL_RCC_OscConfig+0x37e>
 8002070:	e014      	b.n	800209c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff fa99 	bl	80015a8 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fa95 	bl	80015a8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e09b      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ee      	bne.n	800207a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b3c      	ldr	r3, [pc, #240]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b8:	4b36      	ldr	r3, [pc, #216]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d061      	beq.n	8002188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d146      	bne.n	800215a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fa69 	bl	80015a8 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fa65 	bl	80015a8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e06d      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d108      	bne.n	8002114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	4921      	ldr	r1, [pc, #132]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a19      	ldr	r1, [r3, #32]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	430b      	orrs	r3, r1
 8002126:	491b      	ldr	r1, [pc, #108]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x4cc>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fa39 	bl	80015a8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fa35 	bl	80015a8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e03d      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x46a>
 8002158:	e035      	b.n	80021c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_OscConfig+0x4cc>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fa22 	bl	80015a8 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fa1e 	bl	80015a8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e026      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x498>
 8002186:	e01e      	b.n	80021c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e019      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
 800219c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x500>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000

080021d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0d0      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b6a      	ldr	r3, [pc, #424]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d910      	bls.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4965      	ldr	r1, [pc, #404]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0b8      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800223a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	494d      	ldr	r1, [pc, #308]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d040      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e07f      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e073      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4936      	ldr	r1, [pc, #216]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff f970 	bl	80015a8 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff f96c 	bl	80015a8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e053      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d210      	bcs.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4922      	ldr	r1, [pc, #136]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e032      	b.n	800238a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4916      	ldr	r1, [pc, #88]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800234e:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002362:	f000 f821 	bl	80023a8 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490a      	ldr	r1, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x1c8>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1cc>)
 800237c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f8ce 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40022000 	.word	0x40022000
 8002398:	40021000 	.word	0x40021000
 800239c:	08003ea8 	.word	0x08003ea8
 80023a0:	20000024 	.word	0x20000024
 80023a4:	20000034 	.word	0x20000034

080023a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a8:	b490      	push	{r4, r7}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCC_GetSysClockFreq+0xac>)
 80023b0:	1d3c      	adds	r4, r7, #4
 80023b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b8:	f240 2301 	movw	r3, #513	; 0x201
 80023bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x40>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x46>
 80023e6:	e02b      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023ea:	623b      	str	r3, [r7, #32]
      break;
 80023ec:	e02b      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3328      	adds	r3, #40	; 0x28
 80023f8:	443b      	add	r3, r7
 80023fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023fe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <HAL_RCC_GetSysClockFreq+0xb0>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0c5b      	lsrs	r3, r3, #17
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	3328      	adds	r3, #40	; 0x28
 8002416:	443b      	add	r3, r7
 8002418:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800241c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e004      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	623b      	str	r3, [r7, #32]
      break;
 800243e:	e002      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002442:	623b      	str	r3, [r7, #32]
      break;
 8002444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002446:	6a3b      	ldr	r3, [r7, #32]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc90      	pop	{r4, r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	08003e98 	.word	0x08003e98
 8002458:	40021000 	.word	0x40021000
 800245c:	007a1200 	.word	0x007a1200
 8002460:	003d0900 	.word	0x003d0900

08002464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b02      	ldr	r3, [pc, #8]	; (8002474 <HAL_RCC_GetHCLKFreq+0x10>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	20000024 	.word	0x20000024

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800247c:	f7ff fff2 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08003eb8 	.word	0x08003eb8

080024a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024a4:	f7ff ffde 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	0adb      	lsrs	r3, r3, #11
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4903      	ldr	r1, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b6:	5ccb      	ldrb	r3, [r1, r3]
 80024b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08003eb8 	.word	0x08003eb8

080024c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <RCC_Delay+0x34>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <RCC_Delay+0x38>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e4:	bf00      	nop
  }
  while (Delay --);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	60fa      	str	r2, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <RCC_Delay+0x1c>
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	20000024 	.word	0x20000024
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fe00 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fc28 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e03a      	b.n	8002632 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start_IT+0x98>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d009      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_TIM_Base_Start_IT+0x9c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_TIM_Base_Start_IT+0xa0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d111      	bne.n	8002620 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d010      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	e007      	b.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e041      	b.n	80026de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f839 	bl	80026e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 fb86 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_TIM_PWM_Start+0x24>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e022      	b.n	8002762 <HAL_TIM_PWM_Start+0x6a>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d109      	bne.n	8002736 <HAL_TIM_PWM_Start+0x3e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b01      	cmp	r3, #1
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e015      	b.n	8002762 <HAL_TIM_PWM_Start+0x6a>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d109      	bne.n	8002750 <HAL_TIM_PWM_Start+0x58>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e008      	b.n	8002762 <HAL_TIM_PWM_Start+0x6a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	bf14      	ite	ne
 800275c:	2301      	movne	r3, #1
 800275e:	2300      	moveq	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e05e      	b.n	8002828 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_TIM_PWM_Start+0x82>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	e013      	b.n	80027a2 <HAL_TIM_PWM_Start+0xaa>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d104      	bne.n	800278a <HAL_TIM_PWM_Start+0x92>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002788:	e00b      	b.n	80027a2 <HAL_TIM_PWM_Start+0xaa>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d104      	bne.n	800279a <HAL_TIM_PWM_Start+0xa2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002798:	e003      	b.n	80027a2 <HAL_TIM_PWM_Start+0xaa>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fd74 	bl	8003298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_TIM_PWM_Start+0x138>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_TIM_PWM_Start+0x138>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00e      	beq.n	80027f2 <HAL_TIM_PWM_Start+0xfa>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027dc:	d009      	beq.n	80027f2 <HAL_TIM_PWM_Start+0xfa>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_TIM_PWM_Start+0x13c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_TIM_PWM_Start+0xfa>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_TIM_PWM_Start+0x140>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d111      	bne.n	8002816 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b06      	cmp	r3, #6
 8002802:	d010      	beq.n	8002826 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	e007      	b.n	8002826 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d122      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b02      	cmp	r3, #2
 800285e:	d11b      	bne.n	8002898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0202 	mvn.w	r2, #2
 8002868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa6f 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fa62 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa71 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d122      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d11b      	bne.n	80028ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0204 	mvn.w	r2, #4
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa45 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa38 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fa47 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b08      	cmp	r3, #8
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0208 	mvn.w	r2, #8
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa1b 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa0e 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa1d 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b10      	cmp	r3, #16
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0210 	mvn.w	r2, #16
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2208      	movs	r2, #8
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f9f1 	bl	8002d62 <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f9e4 	bl	8002d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9f3 	bl	8002d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0201 	mvn.w	r2, #1
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fb74 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d8:	2b80      	cmp	r3, #128	; 0x80
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fce1 	bl	80033ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9b7 	bl	8002d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0220 	mvn.w	r2, #32
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fcac 	bl	800339c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e0ac      	b.n	8002bc0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	f200 809f 	bhi.w	8002bb4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002bb5 	.word	0x08002bb5
 8002a84:	08002bb5 	.word	0x08002bb5
 8002a88:	08002bb5 	.word	0x08002bb5
 8002a8c:	08002af1 	.word	0x08002af1
 8002a90:	08002bb5 	.word	0x08002bb5
 8002a94:	08002bb5 	.word	0x08002bb5
 8002a98:	08002bb5 	.word	0x08002bb5
 8002a9c:	08002b33 	.word	0x08002b33
 8002aa0:	08002bb5 	.word	0x08002bb5
 8002aa4:	08002bb5 	.word	0x08002bb5
 8002aa8:	08002bb5 	.word	0x08002bb5
 8002aac:	08002b73 	.word	0x08002b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f9d0 	bl	8002e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      break;
 8002aee:	e062      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa16 	bl	8002f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6999      	ldr	r1, [r3, #24]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	021a      	lsls	r2, r3, #8
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	619a      	str	r2, [r3, #24]
      break;
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fa5f 	bl	8002ffc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0208 	orr.w	r2, r2, #8
 8002b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0204 	bic.w	r2, r2, #4
 8002b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	61da      	str	r2, [r3, #28]
      break;
 8002b70:	e021      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 faa9 	bl	80030d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	61da      	str	r2, [r3, #28]
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0b3      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x180>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c18:	d03e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xd0>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	f200 8087 	bhi.w	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	f000 8085 	beq.w	8002d34 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d87f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d01a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xa2>
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d87b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d050      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x116>
 8002c3c:	2b60      	cmp	r3, #96	; 0x60
 8002c3e:	d877      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d03c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xf6>
 8002c44:	2b50      	cmp	r3, #80	; 0x50
 8002c46:	d873      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d058      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x136>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d86f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d064      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d86b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d060      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d867      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c68:	e062      	b.n	8002d30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f000 faee 	bl	800325a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	609a      	str	r2, [r3, #8]
      break;
 8002c96:	e04e      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f000 fad7 	bl	800325a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e03b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 fa4e 	bl	800316c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2150      	movs	r1, #80	; 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 faa5 	bl	8003226 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e02b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 fa6c 	bl	80031c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2160      	movs	r1, #96	; 0x60
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa95 	bl	8003226 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e01b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 fa2e 	bl	800316c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa85 	bl	8003226 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e00b      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 fa7c 	bl	8003226 <TIM_ITRx_SetConfig>
        break;
 8002d2e:	e002      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <TIM_Base_SetConfig+0xb8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_Base_SetConfig+0x30>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d007      	beq.n	8002dc8 <TIM_Base_SetConfig+0x30>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <TIM_Base_SetConfig+0xbc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0x30>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <TIM_Base_SetConfig+0xc0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d108      	bne.n	8002dda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <TIM_Base_SetConfig+0xb8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00b      	beq.n	8002dfa <TIM_Base_SetConfig+0x62>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de8:	d007      	beq.n	8002dfa <TIM_Base_SetConfig+0x62>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <TIM_Base_SetConfig+0xbc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_Base_SetConfig+0x62>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <TIM_Base_SetConfig+0xc0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a07      	ldr	r2, [pc, #28]	; (8002e50 <TIM_Base_SetConfig+0xb8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d103      	bne.n	8002e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	615a      	str	r2, [r3, #20]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800

08002e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f023 0201 	bic.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f023 0302 	bic.w	r3, r3, #2
 8002ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <TIM_OC1_SetConfig+0xc8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10c      	bne.n	8002ed2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f023 0308 	bic.w	r3, r3, #8
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <TIM_OC1_SetConfig+0xc8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d111      	bne.n	8002efe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	621a      	str	r2, [r3, #32]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40012c00 	.word	0x40012c00

08002f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f023 0210 	bic.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 0320 	bic.w	r3, r3, #32
 8002f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <TIM_OC2_SetConfig+0xd0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d10d      	bne.n	8002fa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC2_SetConfig+0xd0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d113      	bne.n	8002fd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	621a      	str	r2, [r3, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40012c00 	.word	0x40012c00

08002ffc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <TIM_OC3_SetConfig+0xd0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10d      	bne.n	8003076 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <TIM_OC3_SetConfig+0xd0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	bf00      	nop
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00

080030d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4313      	orrs	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800311a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	031b      	lsls	r3, r3, #12
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <TIM_OC4_SetConfig+0x98>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d109      	bne.n	8003144 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40012c00 	.word	0x40012c00

0800316c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f023 030a 	bic.w	r3, r3, #10
 80031a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	621a      	str	r2, [r3, #32]
}
 80031be:	bf00      	nop
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f023 0210 	bic.w	r2, r3, #16
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	031b      	lsls	r3, r3, #12
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003204:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	621a      	str	r2, [r3, #32]
}
 800321c:	bf00      	nop
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	f043 0307 	orr.w	r3, r3, #7
 8003248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800325a:	b480      	push	{r7}
 800325c:	b087      	sub	sp, #28
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003274:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4313      	orrs	r3, r2
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	609a      	str	r2, [r3, #8]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1a      	ldr	r2, [r3, #32]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	401a      	ands	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr

080032e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e046      	b.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d009      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a10      	ldr	r2, [pc, #64]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800

0800339c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e03f      	b.n	8003452 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd ff14 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fc25 	bl	8003c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08a      	sub	sp, #40	; 0x28
 800345e:	af02      	add	r7, sp, #8
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b20      	cmp	r3, #32
 8003478:	d17c      	bne.n	8003574 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_Transmit+0x2c>
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e075      	b.n	8003576 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit+0x3e>
 8003494:	2302      	movs	r3, #2
 8003496:	e06e      	b.n	8003576 <HAL_UART_Transmit+0x11c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ae:	f7fe f87b 	bl	80015a8 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c8:	d108      	bne.n	80034dc <HAL_UART_Transmit+0x82>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	e003      	b.n	80034e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034ec:	e02a      	b.n	8003544 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fa11 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e036      	b.n	8003576 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10b      	bne.n	8003526 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	3302      	adds	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	e007      	b.n	8003536 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	3301      	adds	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1cf      	bne.n	80034ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2200      	movs	r2, #0
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f9e1 	bl	8003920 <UART_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e006      	b.n	8003576 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_UART_IRQHandler+0x52>
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fa99 	bl	8003b02 <UART_Receive_IT>
      return;
 80035d0:	e17b      	b.n	80038ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80b1 	beq.w	800373c <HAL_UART_IRQHandler+0x1bc>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_UART_IRQHandler+0x70>
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80a6 	beq.w	800373c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_UART_IRQHandler+0x90>
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_UART_IRQHandler+0xb0>
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0202 	orr.w	r2, r3, #2
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_UART_IRQHandler+0xd0>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f043 0204 	orr.w	r2, r3, #4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00f      	beq.n	800367a <HAL_UART_IRQHandler+0xfa>
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_UART_IRQHandler+0xee>
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0208 	orr.w	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 811e 	beq.w	80038c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <HAL_UART_IRQHandler+0x11e>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa32 	bl	8003b02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_UART_IRQHandler+0x146>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d031      	beq.n	800372a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f974 	bl	80039b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d023      	beq.n	8003722 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d013      	beq.n	800371a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4a76      	ldr	r2, [pc, #472]	; (80038d0 <HAL_UART_IRQHandler+0x350>)
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe f8a4 	bl	800184c <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	e00e      	b.n	8003738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8ec 	bl	80038f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00a      	b.n	8003738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8e8 	bl	80038f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e006      	b.n	8003738 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8e4 	bl	80038f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003736:	e0c3      	b.n	80038c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	bf00      	nop
    return;
 800373a:	e0c1      	b.n	80038c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80a1 	bne.w	8003888 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 809b 	beq.w	8003888 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8095 	beq.w	8003888 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d04e      	beq.n	8003820 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800378c:	8a3b      	ldrh	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8098 	beq.w	80038c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003798:	8a3a      	ldrh	r2, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	f080 8092 	bcs.w	80038c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8a3a      	ldrh	r2, [r7, #16]
 80037a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d02b      	beq.n	8003808 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0210 	bic.w	r2, r2, #16
 80037fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd ffe7 	bl	80017d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003810:	b29b      	uxth	r3, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f876 	bl	800390a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800381e:	e051      	b.n	80038c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d047      	beq.n	80038c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003838:	8a7b      	ldrh	r3, [r7, #18]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d044      	beq.n	80038c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800384c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0210 	bic.w	r2, r2, #16
 800387a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800387c:	8a7b      	ldrh	r3, [r7, #18]
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f842 	bl	800390a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003886:	e01f      	b.n	80038c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_UART_IRQHandler+0x324>
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8c9 	bl	8003a34 <UART_Transmit_IT>
    return;
 80038a2:	e012      	b.n	80038ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <HAL_UART_IRQHandler+0x34a>
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f90a 	bl	8003ad2 <UART_EndTransmit_IT>
    return;
 80038be:	e004      	b.n	80038ca <HAL_UART_IRQHandler+0x34a>
    return;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <HAL_UART_IRQHandler+0x34a>
      return;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_UART_IRQHandler+0x34a>
      return;
 80038c8:	bf00      	nop
  }
}
 80038ca:	3728      	adds	r7, #40	; 0x28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	08003a0d 	.word	0x08003a0d

080038d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003930:	e02c      	b.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x30>
 8003940:	f7fd fe32 	bl	80015a8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d21d      	bcs.n	800398c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800395e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00f      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d0c3      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0210 	bic.w	r2, r2, #16
 80039f2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f7ff ff66 	bl	80038f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b21      	cmp	r3, #33	; 0x21
 8003a46:	d13e      	bne.n	8003ac6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d114      	bne.n	8003a7c <UART_Transmit_IT+0x48>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]
 8003a7a:	e008      	b.n	8003a8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6211      	str	r1, [r2, #32]
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff feee 	bl	80038d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	f040 8099 	bne.w	8003c4a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d117      	bne.n	8003b52 <UART_Receive_IT+0x50>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b50:	e026      	b.n	8003ba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d007      	beq.n	8003b76 <UART_Receive_IT+0x74>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <UART_Receive_IT+0x82>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e008      	b.n	8003b96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4619      	mov	r1, r3
 8003bae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d148      	bne.n	8003c46 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0220 	bic.w	r2, r2, #32
 8003bc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d123      	bne.n	8003c3c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0210 	bic.w	r2, r2, #16
 8003c08:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d10a      	bne.n	8003c2e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c32:	4619      	mov	r1, r3
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fe68 	bl	800390a <HAL_UARTEx_RxEventCallback>
 8003c3a:	e002      	b.n	8003c42 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe52 	bl	80038e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e002      	b.n	8003c4c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c8e:	f023 030c 	bic.w	r3, r3, #12
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <UART_SetConfig+0x114>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d103      	bne.n	8003cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7fe fbf0 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	e002      	b.n	8003cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7fe fbd8 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009a      	lsls	r2, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <UART_SetConfig+0x118>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	0119      	lsls	r1, r3, #4
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009a      	lsls	r2, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <UART_SetConfig+0x118>)
 8003d02:	fba3 0302 	umull	r0, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2064      	movs	r0, #100	; 0x64
 8003d0a:	fb00 f303 	mul.w	r3, r0, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	3332      	adds	r3, #50	; 0x32
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <UART_SetConfig+0x118>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d20:	4419      	add	r1, r3
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009a      	lsls	r2, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <UART_SetConfig+0x118>)
 8003d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	2064      	movs	r0, #100	; 0x64
 8003d42:	fb00 f303 	mul.w	r3, r0, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	3332      	adds	r3, #50	; 0x32
 8003d4c:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <UART_SetConfig+0x118>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	f003 020f 	and.w	r2, r3, #15
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	51eb851f 	.word	0x51eb851f

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	2600      	movs	r6, #0
 8003d74:	4d0c      	ldr	r5, [pc, #48]	; (8003da8 <__libc_init_array+0x38>)
 8003d76:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	f000 f87e 	bl	8003e80 <_init>
 8003d84:	2600      	movs	r6, #0
 8003d86:	4d0a      	ldr	r5, [pc, #40]	; (8003db0 <__libc_init_array+0x40>)
 8003d88:	4c0a      	ldr	r4, [pc, #40]	; (8003db4 <__libc_init_array+0x44>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08003ee8 	.word	0x08003ee8
 8003dac:	08003ee8 	.word	0x08003ee8
 8003db0:	08003ee8 	.word	0x08003ee8
 8003db4:	08003eec 	.word	0x08003eec

08003db8 <__itoa>:
 8003db8:	1e93      	subs	r3, r2, #2
 8003dba:	2b22      	cmp	r3, #34	; 0x22
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	d904      	bls.n	8003dcc <__itoa+0x14>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	461c      	mov	r4, r3
 8003dc6:	700b      	strb	r3, [r1, #0]
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	2a0a      	cmp	r2, #10
 8003dce:	d109      	bne.n	8003de4 <__itoa+0x2c>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	da07      	bge.n	8003de4 <__itoa+0x2c>
 8003dd4:	232d      	movs	r3, #45	; 0x2d
 8003dd6:	700b      	strb	r3, [r1, #0]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4240      	negs	r0, r0
 8003ddc:	4421      	add	r1, r4
 8003dde:	f000 f80d 	bl	8003dfc <__utoa>
 8003de2:	e7f1      	b.n	8003dc8 <__itoa+0x10>
 8003de4:	2100      	movs	r1, #0
 8003de6:	e7f9      	b.n	8003ddc <__itoa+0x24>

08003de8 <itoa>:
 8003de8:	f7ff bfe6 	b.w	8003db8 <__itoa>

08003dec <memset>:
 8003dec:	4603      	mov	r3, r0
 8003dee:	4402      	add	r2, r0
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d100      	bne.n	8003df6 <memset+0xa>
 8003df4:	4770      	bx	lr
 8003df6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfa:	e7f9      	b.n	8003df0 <memset+0x4>

08003dfc <__utoa>:
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	4605      	mov	r5, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	466e      	mov	r6, sp
 8003e06:	4c1d      	ldr	r4, [pc, #116]	; (8003e7c <__utoa+0x80>)
 8003e08:	f104 0c20 	add.w	ip, r4, #32
 8003e0c:	4637      	mov	r7, r6
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	6861      	ldr	r1, [r4, #4]
 8003e12:	3408      	adds	r4, #8
 8003e14:	c703      	stmia	r7!, {r0, r1}
 8003e16:	4564      	cmp	r4, ip
 8003e18:	463e      	mov	r6, r7
 8003e1a:	d1f7      	bne.n	8003e0c <__utoa+0x10>
 8003e1c:	7921      	ldrb	r1, [r4, #4]
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	7139      	strb	r1, [r7, #4]
 8003e22:	1e91      	subs	r1, r2, #2
 8003e24:	2922      	cmp	r1, #34	; 0x22
 8003e26:	6038      	str	r0, [r7, #0]
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	d904      	bls.n	8003e38 <__utoa+0x3c>
 8003e2e:	7019      	strb	r1, [r3, #0]
 8003e30:	460b      	mov	r3, r1
 8003e32:	4618      	mov	r0, r3
 8003e34:	b00b      	add	sp, #44	; 0x2c
 8003e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e38:	1e58      	subs	r0, r3, #1
 8003e3a:	4684      	mov	ip, r0
 8003e3c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003e40:	fb02 5617 	mls	r6, r2, r7, r5
 8003e44:	3628      	adds	r6, #40	; 0x28
 8003e46:	446e      	add	r6, sp
 8003e48:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003e52:	462e      	mov	r6, r5
 8003e54:	42b2      	cmp	r2, r6
 8003e56:	463d      	mov	r5, r7
 8003e58:	f101 0101 	add.w	r1, r1, #1
 8003e5c:	d9ee      	bls.n	8003e3c <__utoa+0x40>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	545a      	strb	r2, [r3, r1]
 8003e62:	1919      	adds	r1, r3, r4
 8003e64:	1aa5      	subs	r5, r4, r2
 8003e66:	42aa      	cmp	r2, r5
 8003e68:	dae3      	bge.n	8003e32 <__utoa+0x36>
 8003e6a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003e6e:	780e      	ldrb	r6, [r1, #0]
 8003e70:	3201      	adds	r2, #1
 8003e72:	7006      	strb	r6, [r0, #0]
 8003e74:	f801 5901 	strb.w	r5, [r1], #-1
 8003e78:	e7f4      	b.n	8003e64 <__utoa+0x68>
 8003e7a:	bf00      	nop
 8003e7c:	08003ec0 	.word	0x08003ec0

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
